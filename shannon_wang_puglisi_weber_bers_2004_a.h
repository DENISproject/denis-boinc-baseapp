/*======================================================================
                                                                        
                      --- DENIS Project ---                             
                        -----------------                               
                                                                        
      Distributed computing                                             
      Electrophysiologycal Models                                       
      Networking colaboration                                           
      In Silico research                                                
      Sharing Knowledge                                                 
                                                                        
------------------------------------------------------------------------
                                                                        
 -- C File of the shannon_wang_puglisi_weber_bers_2004_a model created for the DENIS Project -- 
                                                                        
 This file has been automatically created using the CellML API.         
                                                                        
------------------------------------------------------------------------
                                                                        
 DENIS-CellML2C Copyright 2015 J. Carro; J. Castro                      
                                                                        
 Licensed under the Apache License, Version 2.0 (the "License");      
 you may not use this file except in compliance with the License.       
 You may obtain a copy of the License at                                
                                                                        
 http://www.apache.org/licenses/LICENSE-2.0                             
                                                                        
 Unless required by applicable law or agreed to in writing, software    
 distributed under the License is distributed on an "AS IS" BASIS,    
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        
 implied. See the License for the specific language governing           
 permissions and limitations under the License.                         
                                                                        
------------------------------------------------------------------------
                                                                        
                                                  San Jorge University  
                                                 School of Engineering  
                                                                        
                                                     http://eps.usj.es  
                                                                        
======================================================================*/

using namespace std;

namespace shannon_wang_puglisi_weber_bers_2004_a{

	#define ALGEBRAIC_LENGTH 111
	#define STATE_LENGTH 39
	#define CONSTANT_LENGTH 138 

	double* getNewConstantsArray(){return new double[CONSTANT_LENGTH];}
	double* getNewRatesArray(){return new double[STATE_LENGTH];}
	double* getNewStatesArray(){return new double[STATE_LENGTH];}
	double* getNewAlgebraicArray(){return new double[ALGEBRAIC_LENGTH];}

	
	void getNewArrays(double **constants, double **rates, double **states, double **algebraic){
		*constants = getNewConstantsArray();
		*rates     = getNewRatesArray();
		*states    = getNewStatesArray();
		*algebraic = getNewAlgebraicArray();
	}
	
	void getVectorsLength(int* algebraicLength, int* statesLength, int* constantsLength){
		*algebraicLength = ALGEBRAIC_LENGTH;
		*statesLength = STATE_LENGTH;
		*constantsLength = CONSTANT_LENGTH;
	}
	
	int getNameId(const char* variable, const char* component, const char** names, int namesLength){
		int index = -1;
		int counter = 0;
		string completName(variable);
		completName += " in component ";
		completName += component;
		for(int i=0; i < namesLength; i++){
			if(strncmp(completName.c_str(), names[i], (long)completName.length())==0){
				index = i;
				counter++;
			}
		}
		
		switch(counter){
			case 1:
				return index;
			case 0:
				return -1;
			default:
				return -counter;
		}
	}
		
	void names(const char* &VoI, const char** constants, const char** rates, const char** states, const char** algebraic){
		VoI  = "time in component environment (millisecond)";
		states[0]  = "V in component cell (millivolt)";
		algebraic[36]  = "i_Na in component INa (microA_per_microF)";
		algebraic[39]  = "i_Nab in component INab (microA_per_microF)";
		algebraic[43]  = "i_NaK in component INaK (microA_per_microF)";
		algebraic[45]  = "i_Kr in component IKr (microA_per_microF)";
		algebraic[53]  = "i_Ks in component IKs (microA_per_microF)";
		algebraic[54]  = "i_Kp in component IKp (microA_per_microF)";
		algebraic[55]  = "i_tos in component Itos (microA_per_microF)";
		algebraic[56]  = "i_tof in component Itof (microA_per_microF)";
		algebraic[60]  = "i_K1 in component IK1 (microA_per_microF)";
		algebraic[79]  = "i_NaCa in component INaCa (microA_per_microF)";
		algebraic[61]  = "i_Cl_Ca in component ICl_Ca (microA_per_microF)";
		algebraic[62]  = "i_Clb in component IClb (microA_per_microF)";
		algebraic[71]  = "i_CaL in component ICaL (microA_per_microF)";
		algebraic[88]  = "i_Cab in component ICab (microA_per_microF)";
		algebraic[85]  = "i_Cap in component ICap (microA_per_microF)";
		algebraic[4]  = "i_Stim in component cell (microA_per_microF)";
		constants[0]  = "stim_start in component cell (millisecond)";
		constants[1]  = "stim_period in component cell (millisecond)";
		constants[2]  = "stim_duration in component cell (millisecond)";
		constants[3]  = "stim_amplitude in component cell (microA_per_microF)";
		constants[4]  = "Ko in component model_parameters (millimolar)";
		constants[5]  = "Nao in component model_parameters (millimolar)";
		constants[6]  = "Cao in component model_parameters (millimolar)";
		constants[7]  = "Clo in component model_parameters (millimolar)";
		constants[8]  = "Ki in component model_parameters (millimolar)";
		constants[9]  = "Mgi in component model_parameters (millimolar)";
		constants[10]  = "Cli in component model_parameters (millimolar)";
		constants[11]  = "R in component model_parameters (joule_per_kilomole_kelvin)";
		constants[12]  = "T in component model_parameters (kelvin)";
		constants[13]  = "F in component model_parameters (coulomb_per_mole)";
		constants[14]  = "Cm in component model_parameters (farad)";
		constants[15]  = "cell_length in component model_parameters (micrometre)";
		constants[16]  = "cell_radius in component model_parameters (micrometre)";
		constants[133]  = "Vol_Cell in component model_parameters (litre)";
		constants[134]  = "Vol_SR in component model_parameters (litre)";
		constants[135]  = "Vol_SL in component model_parameters (litre)";
		constants[136]  = "Vol_jct in component model_parameters (litre)";
		constants[137]  = "Vol_myo in component model_parameters (litre)";
		algebraic[18]  = "E_Na_jct in component reversal_potentials (millivolt)";
		algebraic[28]  = "E_Na_SL in component reversal_potentials (millivolt)";
		algebraic[30]  = "E_Ca_jct in component reversal_potentials (millivolt)";
		algebraic[32]  = "E_Ca_SL in component reversal_potentials (millivolt)";
		constants[124]  = "E_K in component reversal_potentials (millivolt)";
		constants[125]  = "E_Cl in component reversal_potentials (millivolt)";
		states[1]  = "Nai in component Na_buffer (millimolar)";
		states[2]  = "Na_jct in component Na_buffer (millimolar)";
		states[3]  = "Na_SL in component Na_buffer (millimolar)";
		states[4]  = "Cai in component Ca_buffer (millimolar)";
		states[5]  = "Ca_jct in component Ca_buffer (millimolar)";
		states[6]  = "Ca_SL in component Ca_buffer (millimolar)";
		algebraic[34]  = "i_Na_jct in component INa (microA_per_microF)";
		algebraic[35]  = "i_Na_SL in component INa (microA_per_microF)";
		constants[17]  = "G_INa in component INa (milliS_per_microF)";
		constants[18]  = "Fx_Na_jct in component INa (dimensionless)";
		constants[19]  = "Fx_Na_SL in component INa (dimensionless)";
		states[7]  = "m in component INa_m_gate (dimensionless)";
		states[8]  = "h in component INa_h_gate (dimensionless)";
		states[9]  = "j in component INa_j_gate (dimensionless)";
		algebraic[33]  = "openProb in component INa (dimensionless)";
		algebraic[0]  = "alpha_h in component INa_h_gate (per_millisecond)";
		algebraic[14]  = "beta_h in component INa_h_gate (per_millisecond)";
		algebraic[1]  = "alpha_j in component INa_j_gate (per_millisecond)";
		algebraic[15]  = "beta_j in component INa_j_gate (per_millisecond)";
		algebraic[2]  = "alpha_m in component INa_m_gate (per_millisecond)";
		algebraic[16]  = "beta_m in component INa_m_gate (per_millisecond)";
		algebraic[37]  = "i_Nab_jct in component INab (microA_per_microF)";
		algebraic[38]  = "i_Nab_SL in component INab (microA_per_microF)";
		constants[20]  = "G_NaBk in component INab (milliS_per_microF)";
		constants[21]  = "Fx_NaBk_jct in component INab (dimensionless)";
		constants[22]  = "Fx_NaBk_SL in component INab (dimensionless)";
		algebraic[41]  = "i_NaK_jct in component INaK (microA_per_microF)";
		algebraic[42]  = "i_NaK_SL in component INaK (microA_per_microF)";
		algebraic[40]  = "f_NaK in component INaK (dimensionless)";
		constants[23]  = "H_NaK in component INaK (dimensionless)";
		constants[24]  = "Km_Nai in component INaK (millimolar)";
		constants[25]  = "Km_Ko in component INaK (millimolar)";
		constants[26]  = "I_NaK_max in component INaK (microA_per_microF)";
		constants[126]  = "sigma in component INaK (dimensionless)";
		constants[27]  = "Fx_NaK_jct in component INaK (dimensionless)";
		constants[28]  = "Fx_NaK_SL in component INaK (dimensionless)";
		constants[127]  = "G_IKr in component IKr (milliS_per_microF)";
		states[10]  = "Xr in component IKr_Xr_gate (dimensionless)";
		algebraic[44]  = "Rr in component IKr_Rr_gate (dimensionless)";
		algebraic[3]  = "Xr_infinity in component IKr_Xr_gate (dimensionless)";
		algebraic[17]  = "tau_Xr in component IKr_Xr_gate (millisecond)";
		algebraic[51]  = "i_Ks_jct in component IKs (microA_per_microF)";
		algebraic[52]  = "i_Ks_SL in component IKs (microA_per_microF)";
		algebraic[49]  = "G_Ks_SL in component IKs (milliS_per_microF)";
		algebraic[48]  = "G_Ks_jct in component IKs (milliS_per_microF)";
		constants[29]  = "G_Ks_0 in component IKs (milliS_per_microF)";
		constants[30]  = "Fx_Ks_jct in component IKs (dimensionless)";
		constants[31]  = "Fx_Ks_SL in component IKs (dimensionless)";
		algebraic[50]  = "E_Ks in component IKs (millivolt)";
		constants[32]  = "pKNa in component IKs (dimensionless)";
		algebraic[46]  = "pCa_jct in component IKs (dimensionless)";
		algebraic[47]  = "pCa_SL in component IKs (dimensionless)";
		states[11]  = "Xs in component IKs_Xs_gate (dimensionless)";
		algebraic[5]  = "Xs_infinity in component IKs_Xs_gate (dimensionless)";
		algebraic[19]  = "tau_Xs in component IKs_Xs_gate (millisecond)";
		constants[33]  = "g_Kp in component IKp (milliS_per_microF)";
		constants[34]  = "G_tos in component Itos (milliS_per_microF)";
		states[12]  = "Y_tos in component Itos_Y_gate (dimensionless)";
		states[13]  = "X_tos in component Itos_X_gate (dimensionless)";
		states[14]  = "R_tos in component Itos_R_gate (dimensionless)";
		algebraic[6]  = "X_tos_infinity in component Itos_X_gate (dimensionless)";
		algebraic[20]  = "tau_X_tos in component Itos_X_gate (millisecond)";
		algebraic[7]  = "Y_tos_infinity in component Itos_Y_gate (dimensionless)";
		algebraic[21]  = "tau_Y_tos in component Itos_Y_gate (millisecond)";
		algebraic[8]  = "R_tos_infinity in component Itos_R_gate (dimensionless)";
		algebraic[22]  = "tau_R_tos in component Itos_R_gate (millisecond)";
		constants[35]  = "G_tof in component Itof (milliS_per_microF)";
		states[15]  = "Y_tof in component Itof_Y_gate (dimensionless)";
		states[16]  = "X_tof in component Itof_X_gate (dimensionless)";
		algebraic[9]  = "X_tof_infinity in component Itof_X_gate (dimensionless)";
		algebraic[23]  = "tau_X_tof in component Itof_X_gate (millisecond)";
		algebraic[10]  = "Y_tof_infinity in component Itof_Y_gate (dimensionless)";
		algebraic[24]  = "tau_Y_tof in component Itof_Y_gate (millisecond)";
		constants[128]  = "G_K1 in component IK1 (milliS_per_microF)";
		algebraic[59]  = "K1_infinity in component IK1_K1_gate (dimensionless)";
		algebraic[57]  = "alpha_K1 in component IK1_K1_gate (per_millisecond)";
		algebraic[58]  = "beta_K1 in component IK1_K1_gate (per_millisecond)";
		constants[36]  = "G_Cl in component ICl_Ca (milliS_per_microF)";
		constants[37]  = "Kd_ClCa in component ICl_Ca (millimolar)";
		constants[38]  = "Fx_Cl_jct in component ICl_Ca (dimensionless)";
		constants[39]  = "Fx_Cl_SL in component ICl_Ca (dimensionless)";
		constants[40]  = "G_ClBk in component IClb (milliS_per_microF)";
		algebraic[65]  = "i_CaL_Ca_SL in component ICaL (microA_per_microF)";
		algebraic[68]  = "i_CaL_Ca_jct in component ICaL (microA_per_microF)";
		algebraic[66]  = "i_CaL_Na_SL in component ICaL (microA_per_microF)";
		algebraic[69]  = "i_CaL_Na_jct in component ICaL (microA_per_microF)";
		algebraic[70]  = "i_CaL_K in component ICaL (microA_per_microF)";
		constants[41]  = "PCa in component ICaL (litre_per_farad_millisecond)";
		constants[42]  = "PNa in component ICaL (litre_per_farad_millisecond)";
		constants[43]  = "PK in component ICaL (litre_per_farad_millisecond)";
		constants[44]  = "Fx_ICaL_jct in component ICaL (dimensionless)";
		constants[45]  = "Fx_ICaL_SL in component ICaL (dimensionless)";
		constants[46]  = "gamma_Cai in component ICaL (dimensionless)";
		constants[47]  = "gamma_Cao in component ICaL (dimensionless)";
		constants[48]  = "gamma_Nai in component ICaL (dimensionless)";
		constants[49]  = "gamma_Nao in component ICaL (dimensionless)";
		constants[50]  = "gamma_Ki in component ICaL (dimensionless)";
		constants[51]  = "gamma_Ko in component ICaL (dimensionless)";
		constants[52]  = "Q10_CaL in component ICaL (dimensionless)";
		constants[129]  = "Q_CaL in component ICaL (dimensionless)";
		states[17]  = "d in component ICaL_d_gate (dimensionless)";
		states[18]  = "f in component ICaL_f_gate (dimensionless)";
		algebraic[64]  = "fCa_SL in component ICaL_fCa_gate (dimensionless)";
		algebraic[67]  = "fCa_jct in component ICaL_fCa_gate (dimensionless)";
		algebraic[63]  = "temp in component ICaL (coulomb_per_mole)";
		algebraic[11]  = "d_infinity in component ICaL_d_gate (dimensionless)";
		algebraic[25]  = "tau_d in component ICaL_d_gate (millisecond)";
		algebraic[12]  = "f_infinity in component ICaL_f_gate (dimensionless)";
		algebraic[26]  = "tau_f in component ICaL_f_gate (millisecond)";
		states[19]  = "fCaB_SL in component ICaL_fCa_gate (dimensionless)";
		states[20]  = "fCaB_jct in component ICaL_fCa_gate (dimensionless)";
		algebraic[77]  = "i_NaCa_SL in component INaCa (microA_per_microF)";
		algebraic[76]  = "i_NaCa_jct in component INaCa (microA_per_microF)";
		constants[53]  = "V_max in component INaCa (microA_per_microF)";
		constants[54]  = "Fx_NCX_jct in component INaCa (dimensionless)";
		constants[55]  = "Fx_NCX_SL in component INaCa (dimensionless)";
		constants[56]  = "Q10_NCX in component INaCa (dimensionless)";
		constants[130]  = "Q_NCX in component INaCa (dimensionless)";
		constants[57]  = "K_mNai in component INaCa (millimolar)";
		constants[58]  = "K_mCao in component INaCa (millimolar)";
		constants[59]  = "K_mNao in component INaCa (millimolar)";
		constants[60]  = "K_mCai in component INaCa (millimolar)";
		algebraic[74]  = "Ka_SL in component INaCa (dimensionless)";
		algebraic[75]  = "Ka_jct in component INaCa (dimensionless)";
		constants[61]  = "Kd_act in component INaCa (millimolar)";
		constants[62]  = "ksat in component INaCa (dimensionless)";
		constants[63]  = "eta in component INaCa (dimensionless)";
		constants[64]  = "HNa in component INaCa (dimensionless)";
		algebraic[72]  = "temp_jct in component INaCa (millimolar4)";
		algebraic[73]  = "temp_SL in component INaCa (millimolar4)";
		algebraic[84]  = "i_Cap_SL in component ICap (microA_per_microF)";
		algebraic[82]  = "i_Cap_jct in component ICap (microA_per_microF)";
		constants[65]  = "Fx_SLCaP_jct in component ICap (dimensionless)";
		constants[66]  = "Fx_SLCaP_SL in component ICap (dimensionless)";
		constants[67]  = "Q10_SLCaP in component ICap (dimensionless)";
		constants[131]  = "Q_SLCaP in component ICap (dimensionless)";
		constants[68]  = "Km in component ICap (millimolar)";
		constants[69]  = "H in component ICap (dimensionless)";
		constants[70]  = "V_maxAF in component ICap (microA_per_microF)";
		algebraic[86]  = "i_Cab_jct in component ICab (microA_per_microF)";
		algebraic[87]  = "i_Cab_SL in component ICab (microA_per_microF)";
		constants[71]  = "G_CaBk in component ICab (milliS_per_microF)";
		constants[72]  = "Fx_CaBk_jct in component ICab (dimensionless)";
		constants[73]  = "Fx_CaBk_SL in component ICab (dimensionless)";
		algebraic[89]  = "j_rel_SR in component Jrel_SR (millimolar_per_millisecond)";
		constants[74]  = "Max_SR in component Jrel_SR (dimensionless)";
		constants[75]  = "Min_SR in component Jrel_SR (dimensionless)";
		constants[76]  = "EC50_SR in component Jrel_SR (millimolar)";
		states[21]  = "R in component Jrel_SR (dimensionless)";
		states[22]  = "I in component Jrel_SR (dimensionless)";
		algebraic[31]  = "RI in component Jrel_SR (dimensionless)";
		states[23]  = "O in component Jrel_SR (dimensionless)";
		constants[77]  = "ks in component Jrel_SR (per_millisecond)";
		constants[78]  = "koCa in component Jrel_SR (per_millimolar2_per_millisecond)";
		constants[79]  = "kom in component Jrel_SR (per_millisecond)";
		constants[80]  = "kiCa in component Jrel_SR (per_millimolar_per_millisecond)";
		constants[81]  = "kim in component Jrel_SR (per_millisecond)";
		constants[82]  = "HSR in component Jrel_SR (dimensionless)";
		states[24]  = "Ca_SR in component Ca_buffer (millimolar)";
		algebraic[13]  = "kCaSR in component Jrel_SR (dimensionless)";
		algebraic[27]  = "koSRCa in component Jrel_SR (per_millimolar2_per_millisecond)";
		algebraic[29]  = "kiSRCa in component Jrel_SR (per_millimolar_per_millisecond)";
		algebraic[90]  = "j_leak_SR in component Jleak_SR (millimolar_per_millisecond)";
		constants[83]  = "KSRleak in component Jleak_SR (per_millisecond)";
		algebraic[91]  = "j_pump_SR in component Jpump_SR (millimolar_per_millisecond)";
		constants[84]  = "V_max in component Jpump_SR (millimolar_per_millisecond)";
		constants[85]  = "Q10_SRCaP in component Jpump_SR (dimensionless)";
		constants[132]  = "Q_SRCaP in component Jpump_SR (dimensionless)";
		constants[86]  = "Kmf in component Jpump_SR (millimolar)";
		constants[87]  = "Kmr in component Jpump_SR (millimolar)";
		constants[88]  = "H in component Jpump_SR (dimensionless)";
		algebraic[78]  = "J_Na_jct_SL in component ion_diffusion (millimole_per_millisecond)";
		algebraic[81]  = "J_Na_SL_myo in component ion_diffusion (millimole_per_millisecond)";
		algebraic[93]  = "J_Ca_jct_SL in component ion_diffusion (millimole_per_millisecond)";
		algebraic[94]  = "J_Ca_SL_myo in component ion_diffusion (millimole_per_millisecond)";
		states[25]  = "Na_SL_buf in component Na_buffer (millimolar)";
		states[26]  = "Na_jct_buf in component Na_buffer (millimolar)";
		constants[89]  = "Bmax_SL in component Na_buffer (millimolar)";
		constants[90]  = "Bmax_jct in component Na_buffer (millimolar)";
		constants[91]  = "kon in component Na_buffer (per_millimolar_per_millisecond)";
		constants[92]  = "koff in component Na_buffer (per_millisecond)";
		algebraic[80]  = "dNa_jct_buf in component Na_buffer (millimolar_per_millisecond)";
		algebraic[83]  = "dNa_SL_buf in component Na_buffer (millimolar_per_millisecond)";
		states[27]  = "Ca_SLB_SL in component Ca_buffer (millimolar)";
		states[28]  = "Ca_SLB_jct in component Ca_buffer (millimolar)";
		states[29]  = "Ca_SLHigh_SL in component Ca_buffer (millimolar)";
		states[30]  = "Ca_SLHigh_jct in component Ca_buffer (millimolar)";
		states[31]  = "Ca_Calsequestrin in component Ca_buffer (millimolar)";
		constants[93]  = "Bmax_SLB_SL in component Ca_buffer (millimolar)";
		constants[94]  = "Bmax_SLB_jct in component Ca_buffer (millimolar)";
		constants[95]  = "Bmax_SLHigh_SL in component Ca_buffer (millimolar)";
		constants[96]  = "Bmax_SLHigh_jct in component Ca_buffer (millimolar)";
		constants[97]  = "Bmax_Calsequestrin in component Ca_buffer (millimolar)";
		constants[98]  = "kon_SL in component Ca_buffer (per_millimolar_per_millisecond)";
		constants[99]  = "kon_Calsequestrin in component Ca_buffer (per_millimolar_per_millisecond)";
		constants[100]  = "koff_SLB in component Ca_buffer (per_millisecond)";
		constants[101]  = "koff_SLHigh in component Ca_buffer (per_millisecond)";
		constants[102]  = "koff_Calsequestrin in component Ca_buffer (per_millisecond)";
		algebraic[92]  = "dCalsequestrin in component Ca_buffer (millimolar_per_millisecond)";
		algebraic[110]  = "dCa_cytosol_tot_bound in component cytosolic_Ca_buffer (millimolar_per_millisecond)";
		algebraic[97]  = "dCa_SLB_SL in component Ca_buffer (millimolar_per_millisecond)";
		algebraic[95]  = "dCa_SLB_jct in component Ca_buffer (millimolar_per_millisecond)";
		algebraic[100]  = "dCa_SLHigh_SL in component Ca_buffer (millimolar_per_millisecond)";
		algebraic[98]  = "dCa_SLHigh_jct in component Ca_buffer (millimolar_per_millisecond)";
		algebraic[101]  = "dCa_jct_tot_bound in component Ca_buffer (millimolar_per_millisecond)";
		algebraic[104]  = "dCa_SL_tot_bound in component Ca_buffer (millimolar_per_millisecond)";
		algebraic[103]  = "i_Ca_jct_tot in component Ca_buffer (microA_per_microF)";
		algebraic[106]  = "i_Ca_SL_tot in component Ca_buffer (microA_per_microF)";
		states[32]  = "Ca_TroponinC in component cytosolic_Ca_buffer (millimolar)";
		states[33]  = "Ca_TroponinC_Ca_Mg in component cytosolic_Ca_buffer (millimolar)";
		states[34]  = "Mg_TroponinC_Ca_Mg in component cytosolic_Ca_buffer (millimolar)";
		states[35]  = "Ca_Calmodulin in component cytosolic_Ca_buffer (millimolar)";
		states[36]  = "Ca_Myosin in component cytosolic_Ca_buffer (millimolar)";
		states[37]  = "Mg_Myosin in component cytosolic_Ca_buffer (millimolar)";
		states[38]  = "Ca_SRB in component cytosolic_Ca_buffer (millimolar)";
		constants[103]  = "Bmax_TroponinC in component cytosolic_Ca_buffer (millimolar)";
		constants[104]  = "Bmax_TroponinC_Ca_Mg_Ca in component cytosolic_Ca_buffer (millimolar)";
		constants[105]  = "Bmax_TroponinC_Ca_Mg_Mg in component cytosolic_Ca_buffer (millimolar)";
		constants[106]  = "Bmax_Calmodulin in component cytosolic_Ca_buffer (millimolar)";
		constants[107]  = "Bmax_Myosin_Ca in component cytosolic_Ca_buffer (millimolar)";
		constants[108]  = "Bmax_Myosin_Mg in component cytosolic_Ca_buffer (millimolar)";
		constants[109]  = "Bmax_SRB in component cytosolic_Ca_buffer (millimolar)";
		constants[110]  = "kon_TroponinC in component cytosolic_Ca_buffer (per_millimolar_per_millisecond)";
		constants[111]  = "kon_TroponinC_Ca_Mg_Ca in component cytosolic_Ca_buffer (per_millimolar_per_millisecond)";
		constants[112]  = "kon_TroponinC_Ca_Mg_Mg in component cytosolic_Ca_buffer (per_millimolar_per_millisecond)";
		constants[113]  = "kon_Calmodulin in component cytosolic_Ca_buffer (per_millimolar_per_millisecond)";
		constants[114]  = "kon_Myosin_Ca in component cytosolic_Ca_buffer (per_millimolar_per_millisecond)";
		constants[115]  = "kon_Myosin_Mg in component cytosolic_Ca_buffer (per_millimolar_per_millisecond)";
		constants[116]  = "kon_SRB in component cytosolic_Ca_buffer (per_millimolar_per_millisecond)";
		constants[117]  = "koff_TroponinC in component cytosolic_Ca_buffer (per_millisecond)";
		constants[118]  = "koff_TroponinC_Ca_Mg_Ca in component cytosolic_Ca_buffer (per_millisecond)";
		constants[119]  = "koff_TroponinC_Ca_Mg_Mg in component cytosolic_Ca_buffer (per_millisecond)";
		constants[120]  = "koff_Calmodulin in component cytosolic_Ca_buffer (per_millisecond)";
		constants[121]  = "koff_Myosin_Ca in component cytosolic_Ca_buffer (per_millisecond)";
		constants[122]  = "koff_Myosin_Mg in component cytosolic_Ca_buffer (per_millisecond)";
		constants[123]  = "koff_SRB in component cytosolic_Ca_buffer (per_millisecond)";
		algebraic[96]  = "dCa_TroponinC in component cytosolic_Ca_buffer (millimolar_per_millisecond)";
		algebraic[99]  = "dCa_TroponinC_Ca_Mg in component cytosolic_Ca_buffer (millimolar_per_millisecond)";
		algebraic[102]  = "dMg_TroponinC_Ca_Mg in component cytosolic_Ca_buffer (millimolar_per_millisecond)";
		algebraic[105]  = "dCa_Calmodulin in component cytosolic_Ca_buffer (millimolar_per_millisecond)";
		algebraic[107]  = "dCa_Myosin in component cytosolic_Ca_buffer (millimolar_per_millisecond)";
		algebraic[108]  = "dMg_Myosin in component cytosolic_Ca_buffer (millimolar_per_millisecond)";
		algebraic[109]  = "dCa_SRB in component cytosolic_Ca_buffer (millimolar_per_millisecond)";
		rates[0]  = "d/dt V in component cell (millivolt)";
		rates[8]  = "d/dt h in component INa_h_gate (dimensionless)";
		rates[9]  = "d/dt j in component INa_j_gate (dimensionless)";
		rates[7]  = "d/dt m in component INa_m_gate (dimensionless)";
		rates[10]  = "d/dt Xr in component IKr_Xr_gate (dimensionless)";
		rates[11]  = "d/dt Xs in component IKs_Xs_gate (dimensionless)";
		rates[13]  = "d/dt X_tos in component Itos_X_gate (dimensionless)";
		rates[12]  = "d/dt Y_tos in component Itos_Y_gate (dimensionless)";
		rates[14]  = "d/dt R_tos in component Itos_R_gate (dimensionless)";
		rates[16]  = "d/dt X_tof in component Itof_X_gate (dimensionless)";
		rates[15]  = "d/dt Y_tof in component Itof_Y_gate (dimensionless)";
		rates[17]  = "d/dt d in component ICaL_d_gate (dimensionless)";
		rates[18]  = "d/dt f in component ICaL_f_gate (dimensionless)";
		rates[19]  = "d/dt fCaB_SL in component ICaL_fCa_gate (dimensionless)";
		rates[20]  = "d/dt fCaB_jct in component ICaL_fCa_gate (dimensionless)";
		rates[21]  = "d/dt R in component Jrel_SR (dimensionless)";
		rates[23]  = "d/dt O in component Jrel_SR (dimensionless)";
		rates[22]  = "d/dt I in component Jrel_SR (dimensionless)";
		rates[26]  = "d/dt Na_jct_buf in component Na_buffer (millimolar)";
		rates[25]  = "d/dt Na_SL_buf in component Na_buffer (millimolar)";
		rates[2]  = "d/dt Na_jct in component Na_buffer (millimolar)";
		rates[3]  = "d/dt Na_SL in component Na_buffer (millimolar)";
		rates[1]  = "d/dt Nai in component Na_buffer (millimolar)";
		rates[31]  = "d/dt Ca_Calsequestrin in component Ca_buffer (millimolar)";
		rates[27]  = "d/dt Ca_SLB_SL in component Ca_buffer (millimolar)";
		rates[28]  = "d/dt Ca_SLB_jct in component Ca_buffer (millimolar)";
		rates[29]  = "d/dt Ca_SLHigh_SL in component Ca_buffer (millimolar)";
		rates[30]  = "d/dt Ca_SLHigh_jct in component Ca_buffer (millimolar)";
		rates[24]  = "d/dt Ca_SR in component Ca_buffer (millimolar)";
		rates[5]  = "d/dt Ca_jct in component Ca_buffer (millimolar)";
		rates[6]  = "d/dt Ca_SL in component Ca_buffer (millimolar)";
		rates[4]  = "d/dt Cai in component Ca_buffer (millimolar)";
		rates[32]  = "d/dt Ca_TroponinC in component cytosolic_Ca_buffer (millimolar)";
		rates[33]  = "d/dt Ca_TroponinC_Ca_Mg in component cytosolic_Ca_buffer (millimolar)";
		rates[34]  = "d/dt Mg_TroponinC_Ca_Mg in component cytosolic_Ca_buffer (millimolar)";
		rates[35]  = "d/dt Ca_Calmodulin in component cytosolic_Ca_buffer (millimolar)";
		rates[36]  = "d/dt Ca_Myosin in component cytosolic_Ca_buffer (millimolar)";
		rates[37]  = "d/dt Mg_Myosin in component cytosolic_Ca_buffer (millimolar)";
		rates[38]  = "d/dt Ca_SRB in component cytosolic_Ca_buffer (millimolar)";
	}

	void initConsts(double* constants, double* states){
		states[0] = -8.556885e1;
		constants[0] = 0;
		constants[1] = 1000;
		constants[2] = 5;
		constants[3] = 9.5;
		constants[4] = 5.4;
		constants[5] = 140;
		constants[6] = 1.8;
		constants[7] = 150;
		constants[8] = 135;
		constants[9] = 1;
		constants[10] = 15;
		constants[11] = 8314.3;
		constants[12] = 310;
		constants[13] = 96485;
		constants[14] = 1.381e-10;
		constants[15] = 100;
		constants[16] = 10.25;
		states[1] = 8.80853;
		states[2] = 8.80329;
		states[3] = 8.80733;
		states[4] = 8.597401e-5;
		states[5] = 1.737475e-4;
		states[6] = 1.031812e-4;
		constants[17] = 16;
		constants[18] = 0.11;
		constants[19] = 0.89;
		states[7] = 1.405627e-3;
		states[8] = 9.867005e-1;
		states[9] = 9.91562e-1;
		constants[20] = 0.297e-3;
		constants[21] = 0.11;
		constants[22] = 0.89;
		constants[23] = 4;
		constants[24] = 11;
		constants[25] = 1.5;
		constants[26] = 1.90719;
		constants[27] = 0.11;
		constants[28] = 0.89;
		states[10] = 8.641386e-3;
		constants[29] = 0.07;
		constants[30] = 0.11;
		constants[31] = 0.89;
		constants[32] = 0.01833;
		states[11] = 5.412034e-3;
		constants[33] = 0.001;
		constants[34] = 0.06;
		states[12] = 9.945511e-1;
		states[13] = 4.051574e-3;
		states[14] = 0.9946;
		constants[35] = 0.02;
		states[15] = 9.945511e-1;
		states[16] = 4.051574e-3;
		constants[36] = 0.109625;
		constants[37] = 0.1;
		constants[38] = 0.11;
		constants[39] = 0.89;
		constants[40] = 0.009;
		constants[41] = 5.4e-4;
		constants[42] = 1.5e-8;
		constants[43] = 2.7e-7;
		constants[44] = 0.9;
		constants[45] = 0.1;
		constants[46] = 0.341;
		constants[47] = 0.341;
		constants[48] = 0.75;
		constants[49] = 0.75;
		constants[50] = 0.75;
		constants[51] = 0.75;
		constants[52] = 1.8;
		states[17] = 7.175662e-6;
		states[18] = 1.000681;
		states[19] = 1.452605e-2;
		states[20] = 2.421991e-2;
		constants[53] = 9;
		constants[54] = 0.11;
		constants[55] = 0.89;
		constants[56] = 1.57;
		constants[57] = 12.29;
		constants[58] = 1.3;
		constants[59] = 87.5;
		constants[60] = 0.00359;
		constants[61] = 0.000256;
		constants[62] = 0.27;
		constants[63] = 0.35;
		constants[64] = 3;
		constants[65] = 0.11;
		constants[66] = 0.89;
		constants[67] = 2.35;
		constants[68] = 0.0005;
		constants[69] = 1.6;
		constants[70] = 0.0673;
		constants[71] = 0.0002513;
		constants[72] = 0.11;
		constants[73] = 0.89;
		constants[74] = 15;
		constants[75] = 1;
		constants[76] = 0.45;
		states[21] = 8.884332e-1;
		states[22] = 1.024274e-7;
		states[23] = 8.156628e-7;
		constants[77] = 25;
		constants[78] = 10;
		constants[79] = 0.06;
		constants[80] = 0.5;
		constants[81] = 0.005;
		constants[82] = 2.5;
		states[24] = 5.545201e-1;
		constants[83] = 5.348e-6;
		constants[84] = 5.3114e-3;
		constants[85] = 2.6;
		constants[86] = 0.000246;
		constants[87] = 1.7;
		constants[88] = 1.787;
		states[25] = 7.720854e-1;
		states[26] = 3.539892;
		constants[89] = 1.65;
		constants[90] = 7.561;
		constants[91] = 0.0001;
		constants[92] = 1e-3;
		states[27] = 1.110363e-1;
		states[28] = 9.566355e-3;
		states[29] = 7.297378e-2;
		states[30] = 7.347888e-3;
		states[31] = 1.242988;
		constants[93] = 0.0374;
		constants[94] = 0.0046;
		constants[95] = 0.0134;
		constants[96] = 0.00165;
		constants[97] = 0.14;
		constants[98] = 100;
		constants[99] = 100;
		constants[100] = 1.3;
		constants[101] = 30e-3;
		constants[102] = 65;
		states[32] = 8.773191e-3;
		states[33] = 1.078283e-1;
		states[34] = 1.524002e-2;
		states[35] = 2.911916e-4;
		states[36] = 1.298754e-3;
		states[37] = 1.381982e-1;
		states[38] = 2.143165e-3;
		constants[103] = 0.07;
		constants[104] = 0.14;
		constants[105] = 0.14;
		constants[106] = 0.024;
		constants[107] = 0.14;
		constants[108] = 0.14;
		constants[109] = 0.0171;
		constants[110] = 32.7;
		constants[111] = 2.37;
		constants[112] = 3e-3;
		constants[113] = 34;
		constants[114] = 13.8;
		constants[115] = 15.7e-3;
		constants[116] = 100;
		constants[117] = 19.6e-3;
		constants[118] = 0.032e-3;
		constants[119] = 3.33e-3;
		constants[120] = 238e-3;
		constants[121] = 0.46e-3;
		constants[122] = 0.057e-3;
		constants[123] = 60e-3;
		constants[124] =  (( constants[11]*constants[12])/constants[13])*log(constants[4]/constants[8]);
		constants[125] =  (( constants[11]*constants[12])/constants[13])*log(constants[10]/constants[7]);
		constants[126] = (exp(constants[5]/67.3000) - 1.00000)/7.00000;
		constants[127] =  0.0300000* pow((constants[4]/5.40000), 1.0 / 2);
		constants[128] =  0.900000* pow((constants[4]/5.40000), 1.0 / 2);
		constants[129] = pow(constants[52], (constants[12] - 310.000)/10.0000);
		constants[130] = pow(constants[56], (constants[12] - 310.000)/10.0000);
		constants[131] = pow(constants[67], (constants[12] - 310.000)/10.0000);
		constants[132] = pow(constants[85], (constants[12] - 310.000)/10.0000);
		constants[133] = ( 3.14159*pow(constants[16]/1000.00, 2.00000)*constants[15])/pow(1000.00, 3.00000);
		constants[134] =  0.0350000*constants[133];
		constants[135] =  0.0200000*constants[133];
		constants[136] =  0.0539000*0.0100000*constants[133];
		constants[137] =  0.650000*constants[133];
	}

	void computeRates(double VoI, double* constants, double* rates, double* states, double* algebraic){
		rates[19] =  1.70000*states[6]*(1.00000 - states[19]) -  0.0119000*states[19];
		rates[20] =  1.70000*states[5]*(1.00000 - states[20]) -  0.0119000*states[20];
		algebraic[0] = (states[0]<- 40.0000 ?  0.135000*exp((80.0000+states[0])/- 6.80000) : 0.00000);
		algebraic[14] = (states[0]<- 40.0000 ?  3.56000*exp( 0.0790000*states[0])+ 310000.*exp( 0.350000*states[0]) : 1.00000/( 0.130000*(1.00000+exp((states[0]+10.6600)/- 11.1000))));
		rates[8] =  algebraic[0]*(1.00000 - states[8]) -  algebraic[14]*states[8];
		algebraic[1] = (states[0]<- 40.0000 ? (( ( - 127140.*exp( 0.244400*states[0]) -  3.47400e-05*exp( - 0.0439100*states[0]))*(states[0]+37.7800))/1.00000)/(1.00000+exp( 0.311000*(states[0]+79.2300))) : 0.00000);
		algebraic[15] = (states[0]<- 40.0000 ? ( 0.121200*exp( - 0.0105200*states[0]))/(1.00000+exp( - 0.137800*(states[0]+40.1400))) : ( 0.300000*exp( - 2.53500e-07*states[0]))/(1.00000+exp( - 0.100000*(states[0]+32.0000))));
		rates[9] =  algebraic[1]*(1.00000 - states[9]) -  algebraic[15]*states[9];
		algebraic[2] = (( 0.320000*(states[0]+47.1300))/1.00000)/(1.00000 - exp( - 0.100000*(states[0]+47.1300)));
		algebraic[16] =  0.0800000*exp(- states[0]/11.0000);
		rates[7] =  algebraic[2]*(1.00000 - states[7]) -  algebraic[16]*states[7];
		algebraic[3] = 1.00000/(1.00000+exp(- (50.0000+states[0])/7.50000));
		algebraic[17] = 1.00000/(( 0.00138000*(states[0]+7.00000))/(1.00000 - exp( - 0.123000*(states[0]+7.00000)))+( 0.000610000*(states[0]+10.0000))/(exp( 0.145000*(states[0]+10.0000)) - 1.00000));
		rates[10] = (algebraic[3] - states[10])/algebraic[17];
		algebraic[5] = 1.00000/(1.00000+exp(- (states[0] - 1.50000)/16.7000));
		algebraic[19] = 1.00000/(( 7.19000e-05*(states[0]+30.0000))/(1.00000 - exp( - 0.148000*(states[0]+30.0000)))+( 0.000131000*(states[0]+30.0000))/(- 1.00000+exp( 0.0687000*(states[0]+30.0000))));
		rates[11] = (algebraic[5] - states[11])/algebraic[19];
		algebraic[6] = 1.00000/(1.00000+exp(- (states[0]+3.00000)/15.0000));
		algebraic[20] = 9.00000/(1.00000+exp((states[0]+3.00000)/15.0000))+0.500000;
		rates[13] = (algebraic[6] - states[13])/algebraic[20];
		algebraic[7] = 1.00000/(1.00000+exp((states[0]+33.5000)/10.0000));
		algebraic[21] = 3000.00/(1.00000+exp((states[0]+60.0000)/10.0000))+30.0000;
		rates[12] = (algebraic[7] - states[12])/algebraic[21];
		algebraic[8] = 1.00000/(1.00000+exp((states[0]+33.5000)/10.0000));
		algebraic[22] = 2800.00/(1.00000+exp((states[0]+60.0000)/10.0000))+220.000;
		rates[14] = (algebraic[8] - states[14])/algebraic[22];
		algebraic[9] = 1.00000/(1.00000+exp(- (states[0]+3.00000)/15.0000));
		algebraic[23] =  3.50000*exp(- pow(states[0]/30.0000, 2.00000))+1.50000;
		rates[16] = (algebraic[9] - states[16])/algebraic[23];
		algebraic[10] = 1.00000/(1.00000+exp((states[0]+33.5000)/10.0000));
		algebraic[24] = 20.0000/(1.00000+exp((states[0]+33.5000)/10.0000))+20.0000;
		rates[15] = (algebraic[10] - states[15])/algebraic[24];
		algebraic[11] = 1.00000/(1.00000+exp(- (states[0]+14.5000)/6.00000));
		algebraic[25] = ( 1.00000*algebraic[11]*(1.00000 - exp(- (states[0]+14.5000)/6.00000)))/( 0.0350000*(states[0]+14.5000));
		rates[17] = (algebraic[11] - states[17])/algebraic[25];
		algebraic[12] = 1.00000/(1.00000+exp((states[0]+35.0600)/3.60000))+0.600000/(1.00000+exp((50.0000 - states[0])/20.0000));
		algebraic[26] = 1.00000/( 0.0197000*exp(- pow( 0.0337000*(states[0]+14.5000), 2.00000))+0.0200000);
		rates[18] = (algebraic[12] - states[18])/algebraic[26];
		algebraic[13] = constants[74] - (constants[74] - constants[75])/(1.00000+pow(constants[76]/states[24], constants[82]));
		algebraic[27] = constants[78]/algebraic[13];
		algebraic[29] =  constants[80]*algebraic[13];
		rates[23] = ( algebraic[27]*pow(states[5], 2.00000)*states[21] -  constants[79]*states[23]) - ( algebraic[29]*states[5]*states[23] -  constants[81]*states[22]);
		algebraic[31] = ((1.00000 - states[21]) - states[23]) - states[22];
		rates[21] = ( constants[81]*algebraic[31] -  algebraic[29]*states[5]*states[21]) - ( algebraic[27]*pow(states[5], 2.00000)*states[21] -  constants[79]*states[23]);
		rates[22] = ( algebraic[29]*states[5]*states[23] -  constants[81]*states[22]) - ( constants[79]*states[22] -  algebraic[27]*pow(states[5], 2.00000)*algebraic[31]);
		algebraic[80] =  constants[91]*states[2]*(constants[90] - states[26]) -  constants[92]*states[26];
		rates[26] = algebraic[80];
		algebraic[18] =  (( constants[11]*constants[12])/constants[13])*log(constants[5]/states[2]);
		algebraic[33] =  pow(states[7], 3.00000)*states[8]*states[9];
		algebraic[34] =  constants[18]*constants[17]*algebraic[33]*(states[0] - algebraic[18]);
		algebraic[37] =  constants[21]*constants[20]*(states[0] - algebraic[18]);
		algebraic[40] = 1.00000/(1.00000+ 0.124500*exp(( - 0.100000*states[0]*constants[13])/( constants[11]*constants[12]))+ 0.0365000*constants[126]*exp(( - states[0]*constants[13])/( constants[11]*constants[12])));
		algebraic[41] = ( (( constants[27]*constants[26]*algebraic[40])/(1.00000+pow(constants[24]/states[2], constants[23])))*constants[4])/(constants[4]+constants[25]);
		algebraic[67] = 1.00000 - states[20];
		algebraic[63] = ( 0.450000*states[17]*states[18]*constants[129]*states[0]*pow(constants[13], 2.00000))/( constants[11]*constants[12]);
		algebraic[69] = ( algebraic[63]*algebraic[67]*constants[44]*constants[42]*( constants[48]*states[2]*exp(( states[0]*constants[13])/( constants[11]*constants[12])) -  constants[49]*constants[5]))/(exp(( states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[75] = 1.00000/(1.00000+pow(constants[61]/states[5], 3.00000));
		algebraic[72] = ( exp(( constants[63]*states[0]*constants[13])/( constants[11]*constants[12]))*pow(states[2], constants[64])*constants[6] -  exp(( (constants[63] - 1.00000)*states[0]*constants[13])/( constants[11]*constants[12]))*pow(constants[5], constants[64])*states[5])/(1.00000+ constants[62]*exp(( (constants[63] - 1.00000)*states[0]*constants[13])/( constants[11]*constants[12])));
		algebraic[76] = ( constants[54]*constants[53]*algebraic[75]*constants[130]*algebraic[72])/( constants[60]*pow(constants[5], constants[64])*(1.00000+pow(states[2]/constants[57], constants[64]))+ pow(constants[59], constants[64])*states[5]*(1.00000+states[5]/constants[60])+ constants[58]*pow(states[2], constants[64])+ pow(states[2], constants[64])*constants[6]+ pow(constants[5], constants[64])*states[5]);
		algebraic[78] =  (states[2] - states[3])*1.83130e-14;
		rates[2] = (( - constants[14]*(algebraic[34]+ 3.00000*algebraic[76]+algebraic[37]+ 3.00000*algebraic[41]+algebraic[69]))/( constants[136]*constants[13]) - algebraic[78]/constants[136]) - algebraic[80];
		algebraic[81] =  (states[3] - states[1])*1.63860e-12;
		rates[1] = algebraic[81]/constants[137];
		algebraic[83] =  constants[91]*states[3]*(constants[89] - states[25]) -  constants[92]*states[25];
		rates[25] = algebraic[83];
		algebraic[28] =  (( constants[11]*constants[12])/constants[13])*log(constants[5]/states[3]);
		algebraic[35] =  constants[19]*constants[17]*algebraic[33]*(states[0] - algebraic[28]);
		algebraic[38] =  constants[22]*constants[20]*(states[0] - algebraic[28]);
		algebraic[42] = ( (( constants[28]*constants[26]*algebraic[40])/(1.00000+pow(constants[24]/states[3], constants[23])))*constants[4])/(constants[4]+constants[25]);
		algebraic[64] = 1.00000 - states[19];
		algebraic[66] = ( algebraic[63]*algebraic[64]*constants[45]*constants[42]*( constants[48]*states[3]*exp(( states[0]*constants[13])/( constants[11]*constants[12])) -  constants[49]*constants[5]))/(exp(( states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[74] = 1.00000/(1.00000+pow(constants[61]/states[6], 3.00000));
		algebraic[73] = ( exp(( constants[63]*states[0]*constants[13])/( constants[11]*constants[12]))*pow(states[3], constants[64])*constants[6] -  exp(( (constants[63] - 1.00000)*states[0]*constants[13])/( constants[11]*constants[12]))*pow(constants[5], constants[64])*states[6])/(1.00000+ constants[62]*exp(( (constants[63] - 1.00000)*states[0]*constants[13])/( constants[11]*constants[12])));
		algebraic[77] = ( constants[55]*constants[53]*algebraic[74]*constants[130]*algebraic[73])/( constants[60]*pow(constants[5], constants[64])*(1.00000+pow(states[3]/constants[57], constants[64]))+ pow(constants[59], constants[64])*states[6]*(1.00000+states[6]/constants[60])+ constants[58]*pow(states[3], constants[64])+ pow(states[3], constants[64])*constants[6]+ pow(constants[5], constants[64])*states[6]);
		rates[3] = (( - constants[14]*(algebraic[35]+ 3.00000*algebraic[77]+algebraic[38]+ 3.00000*algebraic[42]+algebraic[66]))/( constants[135]*constants[13])+(algebraic[78] - algebraic[81])/constants[135]) - algebraic[83];
		algebraic[36] = algebraic[34]+algebraic[35];
		algebraic[39] = algebraic[37]+algebraic[38];
		algebraic[43] = algebraic[41]+algebraic[42];
		algebraic[44] = 1.00000/(1.00000+exp((33.0000+states[0])/22.4000));
		algebraic[45] =  constants[127]*states[10]*algebraic[44]*(states[0] - constants[124]);
		algebraic[46] = - log(states[5]/1.00000)/log(10)+3.00000;
		algebraic[48] =  constants[29]*(0.0570000+0.190000/(1.00000+exp((- 7.20000+algebraic[46])/0.600000)));
		algebraic[50] =  (( constants[11]*constants[12])/constants[13])*log((constants[4]+ constants[32]*constants[5])/(constants[8]+ constants[32]*states[1]));
		algebraic[51] =  constants[30]*algebraic[48]*pow(states[11], 2.00000)*(states[0] - algebraic[50]);
		algebraic[47] = - log(states[6]/1.00000)/log(10)+3.00000;
		algebraic[49] =  constants[29]*(0.0570000+0.190000/(1.00000+exp((- 7.20000+algebraic[47])/0.600000)));
		algebraic[52] =  constants[31]*algebraic[49]*pow(states[11], 2.00000)*(states[0] - algebraic[50]);
		algebraic[53] = algebraic[51]+algebraic[52];
		algebraic[54] = ( constants[33]*(states[0] - constants[124]))/(1.00000+exp(7.48800 - states[0]/5.98000));
		algebraic[55] =  constants[34]*states[13]*(states[12]+ 0.500000*states[14])*(states[0] - constants[124]);
		algebraic[56] =  constants[35]*states[16]*states[15]*(states[0] - constants[124]);
		algebraic[57] = 1.02000/(1.00000+exp( 0.238500*(states[0] - (constants[124]+59.2150))));
		algebraic[58] = ( 0.491240*exp( 0.0803200*((states[0] - constants[124])+5.47600))+ 1.00000*exp( 0.0617500*(states[0] - (constants[124]+594.310))))/(1.00000+exp( - 0.514300*((states[0] - constants[124])+4.75300)));
		algebraic[59] = algebraic[57]/(algebraic[57]+algebraic[58]);
		algebraic[60] =  constants[128]*algebraic[59]*(states[0] - constants[124]);
		algebraic[79] = algebraic[76]+algebraic[77];
		algebraic[61] =  constants[36]*(states[0] - constants[125])*(constants[38]/(1.00000+constants[37]/states[5])+constants[39]/(1.00000+constants[37]/states[6]));
		algebraic[62] =  constants[40]*(states[0] - constants[125]);
		algebraic[65] = ( algebraic[63]*algebraic[64]*constants[45]*constants[41]*4.00000*( constants[46]*states[6]*exp(( 2.00000*states[0]*constants[13])/( constants[11]*constants[12])) -  constants[47]*constants[6]))/(exp(( 2.00000*states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[68] = ( algebraic[63]*algebraic[67]*constants[44]*constants[41]*4.00000*( constants[46]*states[5]*exp(( 2.00000*states[0]*constants[13])/( constants[11]*constants[12])) -  constants[47]*constants[6]))/(exp(( 2.00000*states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[70] = ( algebraic[63]*( algebraic[64]*constants[45]+ algebraic[67]*constants[44])*constants[43]*( constants[50]*constants[8]*exp(( states[0]*constants[13])/( constants[11]*constants[12])) -  constants[51]*constants[4]))/(exp(( states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[71] = algebraic[65]+algebraic[68]+algebraic[66]+algebraic[69]+algebraic[70];
		algebraic[30] =  (( constants[11]*constants[12])/( 2.00000*constants[13]))*log(constants[6]/states[5]);
		algebraic[86] =  constants[71]*constants[72]*(states[0] - algebraic[30]);
		algebraic[32] =  (( constants[11]*constants[12])/( 2.00000*constants[13]))*log(constants[6]/states[6]);
		algebraic[87] =  constants[71]*constants[73]*(states[0] - algebraic[32]);
		algebraic[88] = algebraic[87]+algebraic[86];
		algebraic[84] = ( constants[131]*constants[70]*constants[66])/(1.00000+pow(constants[68]/states[6], constants[69]));
		algebraic[82] = ( constants[131]*constants[70]*constants[65])/(1.00000+pow(constants[68]/states[5], constants[69]));
		algebraic[85] = algebraic[82]+algebraic[84];
		algebraic[4] = (VoI -  floor(VoI/constants[1])*constants[1]>=constants[0]&&VoI -  floor(VoI/constants[1])*constants[1]<=constants[0]+constants[2] ? - constants[3] : 0.00000);
		rates[0] = - (algebraic[36]+algebraic[39]+algebraic[43]+algebraic[45]+algebraic[53]+algebraic[55]+algebraic[56]+algebraic[60]+algebraic[79]+algebraic[61]+algebraic[62]+algebraic[71]+algebraic[88]+algebraic[85]+algebraic[54]+algebraic[4]);
		algebraic[92] =  constants[99]*states[24]*(( constants[97]*constants[137])/constants[134] - states[31]) -  constants[102]*states[31];
		rates[31] = algebraic[92];
		algebraic[89] =  constants[77]*states[23]*(states[24] - states[5]);
		algebraic[90] =  constants[83]*(states[24] - states[5]);
		algebraic[91] = ( constants[132]*constants[84]*(pow(states[4]/constants[86], constants[88]) - pow(states[24]/constants[87], constants[88])))/(1.00000+pow(states[4]/constants[86], constants[88])+pow(states[24]/constants[87], constants[88]));
		rates[24] = (algebraic[91] - (( algebraic[90]*constants[137])/constants[134]+algebraic[89])) - algebraic[92];
		algebraic[95] =  constants[98]*states[5]*(( constants[94]*0.100000*constants[137])/constants[136] - states[28]) -  constants[100]*states[28];
		rates[28] = algebraic[95];
		algebraic[97] =  constants[98]*states[6]*(( constants[93]*constants[137])/constants[135] - states[27]) -  constants[100]*states[27];
		rates[27] = algebraic[97];
		algebraic[98] =  constants[98]*states[5]*(( constants[96]*0.100000*constants[137])/constants[136] - states[30]) -  constants[101]*states[30];
		rates[30] = algebraic[98];
		algebraic[96] =  constants[110]*states[4]*(constants[103] - states[32]) -  constants[117]*states[32];
		rates[32] = algebraic[96];
		algebraic[100] =  constants[98]*states[6]*(( constants[95]*constants[137])/constants[135] - states[29]) -  constants[101]*states[29];
		rates[29] = algebraic[100];
		algebraic[99] =  constants[111]*states[4]*(constants[104] - (states[33]+states[34])) -  constants[118]*states[33];
		rates[33] = algebraic[99];
		algebraic[93] =  (states[5] - states[6])*8.24130e-13;
		algebraic[101] = algebraic[95]+algebraic[98];
		algebraic[103] = (algebraic[68] -  2.00000*algebraic[76])+algebraic[86]+algebraic[82];
		rates[5] = ((( - algebraic[103]*constants[14])/( constants[136]*2.00000*constants[13]) - algebraic[93]/constants[136])+( algebraic[89]*constants[134])/constants[136]+( algebraic[90]*constants[137])/constants[136]) -  1.00000*algebraic[101];
		algebraic[102] =  constants[112]*constants[9]*(constants[105] - (states[33]+states[34])) -  constants[119]*states[34];
		rates[34] = algebraic[102];
		algebraic[94] =  (states[6] - states[4])*3.72430e-12;
		algebraic[104] = algebraic[97]+algebraic[100];
		algebraic[106] = (algebraic[65] -  2.00000*algebraic[77])+algebraic[87]+algebraic[84];
		rates[6] = (( - algebraic[106]*constants[14])/( constants[135]*2.00000*constants[13])+(algebraic[93] - algebraic[94])/constants[135]) -  1.00000*algebraic[104];
		algebraic[105] =  constants[113]*states[4]*(constants[106] - states[35]) -  constants[120]*states[35];
		rates[35] = algebraic[105];
		algebraic[107] =  constants[114]*states[4]*(constants[107] - (states[36]+states[37])) -  constants[121]*states[36];
		rates[36] = algebraic[107];
		algebraic[108] =  constants[115]*constants[9]*(constants[108] - (states[36]+states[37])) -  constants[122]*states[37];
		rates[37] = algebraic[108];
		algebraic[109] =  constants[116]*states[4]*(constants[109] - states[38]) -  constants[123]*states[38];
		rates[38] = algebraic[109];
		algebraic[110] = algebraic[96]+algebraic[99]+algebraic[102]+algebraic[105]+algebraic[107]+algebraic[108]+algebraic[109];
		rates[4] = (( - algebraic[91]*constants[134])/constants[137]+algebraic[94]/constants[137]) -  1.00000*algebraic[110];
	}

	void computeVariables(double VoI, double* constants, double* rates, double* states, double* algebraic){
		algebraic[0] = (states[0]<- 40.0000 ?  0.135000*exp((80.0000+states[0])/- 6.80000) : 0.00000);
		algebraic[14] = (states[0]<- 40.0000 ?  3.56000*exp( 0.0790000*states[0])+ 310000.*exp( 0.350000*states[0]) : 1.00000/( 0.130000*(1.00000+exp((states[0]+10.6600)/- 11.1000))));
		algebraic[1] = (states[0]<- 40.0000 ? (( ( - 127140.*exp( 0.244400*states[0]) -  3.47400e-05*exp( - 0.0439100*states[0]))*(states[0]+37.7800))/1.00000)/(1.00000+exp( 0.311000*(states[0]+79.2300))) : 0.00000);
		algebraic[15] = (states[0]<- 40.0000 ? ( 0.121200*exp( - 0.0105200*states[0]))/(1.00000+exp( - 0.137800*(states[0]+40.1400))) : ( 0.300000*exp( - 2.53500e-07*states[0]))/(1.00000+exp( - 0.100000*(states[0]+32.0000))));
		algebraic[2] = (( 0.320000*(states[0]+47.1300))/1.00000)/(1.00000 - exp( - 0.100000*(states[0]+47.1300)));
		algebraic[16] =  0.0800000*exp(- states[0]/11.0000);
		algebraic[3] = 1.00000/(1.00000+exp(- (50.0000+states[0])/7.50000));
		algebraic[17] = 1.00000/(( 0.00138000*(states[0]+7.00000))/(1.00000 - exp( - 0.123000*(states[0]+7.00000)))+( 0.000610000*(states[0]+10.0000))/(exp( 0.145000*(states[0]+10.0000)) - 1.00000));
		algebraic[5] = 1.00000/(1.00000+exp(- (states[0] - 1.50000)/16.7000));
		algebraic[19] = 1.00000/(( 7.19000e-05*(states[0]+30.0000))/(1.00000 - exp( - 0.148000*(states[0]+30.0000)))+( 0.000131000*(states[0]+30.0000))/(- 1.00000+exp( 0.0687000*(states[0]+30.0000))));
		algebraic[6] = 1.00000/(1.00000+exp(- (states[0]+3.00000)/15.0000));
		algebraic[20] = 9.00000/(1.00000+exp((states[0]+3.00000)/15.0000))+0.500000;
		algebraic[7] = 1.00000/(1.00000+exp((states[0]+33.5000)/10.0000));
		algebraic[21] = 3000.00/(1.00000+exp((states[0]+60.0000)/10.0000))+30.0000;
		algebraic[8] = 1.00000/(1.00000+exp((states[0]+33.5000)/10.0000));
		algebraic[22] = 2800.00/(1.00000+exp((states[0]+60.0000)/10.0000))+220.000;
		algebraic[9] = 1.00000/(1.00000+exp(- (states[0]+3.00000)/15.0000));
		algebraic[23] =  3.50000*exp(- pow(states[0]/30.0000, 2.00000))+1.50000;
		algebraic[10] = 1.00000/(1.00000+exp((states[0]+33.5000)/10.0000));
		algebraic[24] = 20.0000/(1.00000+exp((states[0]+33.5000)/10.0000))+20.0000;
		algebraic[11] = 1.00000/(1.00000+exp(- (states[0]+14.5000)/6.00000));
		algebraic[25] = ( 1.00000*algebraic[11]*(1.00000 - exp(- (states[0]+14.5000)/6.00000)))/( 0.0350000*(states[0]+14.5000));
		algebraic[12] = 1.00000/(1.00000+exp((states[0]+35.0600)/3.60000))+0.600000/(1.00000+exp((50.0000 - states[0])/20.0000));
		algebraic[26] = 1.00000/( 0.0197000*exp(- pow( 0.0337000*(states[0]+14.5000), 2.00000))+0.0200000);
		algebraic[13] = constants[74] - (constants[74] - constants[75])/(1.00000+pow(constants[76]/states[24], constants[82]));
		algebraic[27] = constants[78]/algebraic[13];
		algebraic[29] =  constants[80]*algebraic[13];
		algebraic[31] = ((1.00000 - states[21]) - states[23]) - states[22];
		algebraic[80] =  constants[91]*states[2]*(constants[90] - states[26]) -  constants[92]*states[26];
		algebraic[18] =  (( constants[11]*constants[12])/constants[13])*log(constants[5]/states[2]);
		algebraic[33] =  pow(states[7], 3.00000)*states[8]*states[9];
		algebraic[34] =  constants[18]*constants[17]*algebraic[33]*(states[0] - algebraic[18]);
		algebraic[37] =  constants[21]*constants[20]*(states[0] - algebraic[18]);
		algebraic[40] = 1.00000/(1.00000+ 0.124500*exp(( - 0.100000*states[0]*constants[13])/( constants[11]*constants[12]))+ 0.0365000*constants[126]*exp(( - states[0]*constants[13])/( constants[11]*constants[12])));
		algebraic[41] = ( (( constants[27]*constants[26]*algebraic[40])/(1.00000+pow(constants[24]/states[2], constants[23])))*constants[4])/(constants[4]+constants[25]);
		algebraic[67] = 1.00000 - states[20];
		algebraic[63] = ( 0.450000*states[17]*states[18]*constants[129]*states[0]*pow(constants[13], 2.00000))/( constants[11]*constants[12]);
		algebraic[69] = ( algebraic[63]*algebraic[67]*constants[44]*constants[42]*( constants[48]*states[2]*exp(( states[0]*constants[13])/( constants[11]*constants[12])) -  constants[49]*constants[5]))/(exp(( states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[75] = 1.00000/(1.00000+pow(constants[61]/states[5], 3.00000));
		algebraic[72] = ( exp(( constants[63]*states[0]*constants[13])/( constants[11]*constants[12]))*pow(states[2], constants[64])*constants[6] -  exp(( (constants[63] - 1.00000)*states[0]*constants[13])/( constants[11]*constants[12]))*pow(constants[5], constants[64])*states[5])/(1.00000+ constants[62]*exp(( (constants[63] - 1.00000)*states[0]*constants[13])/( constants[11]*constants[12])));
		algebraic[76] = ( constants[54]*constants[53]*algebraic[75]*constants[130]*algebraic[72])/( constants[60]*pow(constants[5], constants[64])*(1.00000+pow(states[2]/constants[57], constants[64]))+ pow(constants[59], constants[64])*states[5]*(1.00000+states[5]/constants[60])+ constants[58]*pow(states[2], constants[64])+ pow(states[2], constants[64])*constants[6]+ pow(constants[5], constants[64])*states[5]);
		algebraic[78] =  (states[2] - states[3])*1.83130e-14;
		algebraic[81] =  (states[3] - states[1])*1.63860e-12;
		algebraic[83] =  constants[91]*states[3]*(constants[89] - states[25]) -  constants[92]*states[25];
		algebraic[28] =  (( constants[11]*constants[12])/constants[13])*log(constants[5]/states[3]);
		algebraic[35] =  constants[19]*constants[17]*algebraic[33]*(states[0] - algebraic[28]);
		algebraic[38] =  constants[22]*constants[20]*(states[0] - algebraic[28]);
		algebraic[42] = ( (( constants[28]*constants[26]*algebraic[40])/(1.00000+pow(constants[24]/states[3], constants[23])))*constants[4])/(constants[4]+constants[25]);
		algebraic[64] = 1.00000 - states[19];
		algebraic[66] = ( algebraic[63]*algebraic[64]*constants[45]*constants[42]*( constants[48]*states[3]*exp(( states[0]*constants[13])/( constants[11]*constants[12])) -  constants[49]*constants[5]))/(exp(( states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[74] = 1.00000/(1.00000+pow(constants[61]/states[6], 3.00000));
		algebraic[73] = ( exp(( constants[63]*states[0]*constants[13])/( constants[11]*constants[12]))*pow(states[3], constants[64])*constants[6] -  exp(( (constants[63] - 1.00000)*states[0]*constants[13])/( constants[11]*constants[12]))*pow(constants[5], constants[64])*states[6])/(1.00000+ constants[62]*exp(( (constants[63] - 1.00000)*states[0]*constants[13])/( constants[11]*constants[12])));
		algebraic[77] = ( constants[55]*constants[53]*algebraic[74]*constants[130]*algebraic[73])/( constants[60]*pow(constants[5], constants[64])*(1.00000+pow(states[3]/constants[57], constants[64]))+ pow(constants[59], constants[64])*states[6]*(1.00000+states[6]/constants[60])+ constants[58]*pow(states[3], constants[64])+ pow(states[3], constants[64])*constants[6]+ pow(constants[5], constants[64])*states[6]);
		algebraic[36] = algebraic[34]+algebraic[35];
		algebraic[39] = algebraic[37]+algebraic[38];
		algebraic[43] = algebraic[41]+algebraic[42];
		algebraic[44] = 1.00000/(1.00000+exp((33.0000+states[0])/22.4000));
		algebraic[45] =  constants[127]*states[10]*algebraic[44]*(states[0] - constants[124]);
		algebraic[46] = - log(states[5]/1.00000)/log(10)+3.00000;
		algebraic[48] =  constants[29]*(0.0570000+0.190000/(1.00000+exp((- 7.20000+algebraic[46])/0.600000)));
		algebraic[50] =  (( constants[11]*constants[12])/constants[13])*log((constants[4]+ constants[32]*constants[5])/(constants[8]+ constants[32]*states[1]));
		algebraic[51] =  constants[30]*algebraic[48]*pow(states[11], 2.00000)*(states[0] - algebraic[50]);
		algebraic[47] = - log(states[6]/1.00000)/log(10)+3.00000;
		algebraic[49] =  constants[29]*(0.0570000+0.190000/(1.00000+exp((- 7.20000+algebraic[47])/0.600000)));
		algebraic[52] =  constants[31]*algebraic[49]*pow(states[11], 2.00000)*(states[0] - algebraic[50]);
		algebraic[53] = algebraic[51]+algebraic[52];
		algebraic[54] = ( constants[33]*(states[0] - constants[124]))/(1.00000+exp(7.48800 - states[0]/5.98000));
		algebraic[55] =  constants[34]*states[13]*(states[12]+ 0.500000*states[14])*(states[0] - constants[124]);
		algebraic[56] =  constants[35]*states[16]*states[15]*(states[0] - constants[124]);
		algebraic[57] = 1.02000/(1.00000+exp( 0.238500*(states[0] - (constants[124]+59.2150))));
		algebraic[58] = ( 0.491240*exp( 0.0803200*((states[0] - constants[124])+5.47600))+ 1.00000*exp( 0.0617500*(states[0] - (constants[124]+594.310))))/(1.00000+exp( - 0.514300*((states[0] - constants[124])+4.75300)));
		algebraic[59] = algebraic[57]/(algebraic[57]+algebraic[58]);
		algebraic[60] =  constants[128]*algebraic[59]*(states[0] - constants[124]);
		algebraic[79] = algebraic[76]+algebraic[77];
		algebraic[61] =  constants[36]*(states[0] - constants[125])*(constants[38]/(1.00000+constants[37]/states[5])+constants[39]/(1.00000+constants[37]/states[6]));
		algebraic[62] =  constants[40]*(states[0] - constants[125]);
		algebraic[65] = ( algebraic[63]*algebraic[64]*constants[45]*constants[41]*4.00000*( constants[46]*states[6]*exp(( 2.00000*states[0]*constants[13])/( constants[11]*constants[12])) -  constants[47]*constants[6]))/(exp(( 2.00000*states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[68] = ( algebraic[63]*algebraic[67]*constants[44]*constants[41]*4.00000*( constants[46]*states[5]*exp(( 2.00000*states[0]*constants[13])/( constants[11]*constants[12])) -  constants[47]*constants[6]))/(exp(( 2.00000*states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[70] = ( algebraic[63]*( algebraic[64]*constants[45]+ algebraic[67]*constants[44])*constants[43]*( constants[50]*constants[8]*exp(( states[0]*constants[13])/( constants[11]*constants[12])) -  constants[51]*constants[4]))/(exp(( states[0]*constants[13])/( constants[11]*constants[12])) - 1.00000);
		algebraic[71] = algebraic[65]+algebraic[68]+algebraic[66]+algebraic[69]+algebraic[70];
		algebraic[30] =  (( constants[11]*constants[12])/( 2.00000*constants[13]))*log(constants[6]/states[5]);
		algebraic[86] =  constants[71]*constants[72]*(states[0] - algebraic[30]);
		algebraic[32] =  (( constants[11]*constants[12])/( 2.00000*constants[13]))*log(constants[6]/states[6]);
		algebraic[87] =  constants[71]*constants[73]*(states[0] - algebraic[32]);
		algebraic[88] = algebraic[87]+algebraic[86];
		algebraic[84] = ( constants[131]*constants[70]*constants[66])/(1.00000+pow(constants[68]/states[6], constants[69]));
		algebraic[82] = ( constants[131]*constants[70]*constants[65])/(1.00000+pow(constants[68]/states[5], constants[69]));
		algebraic[85] = algebraic[82]+algebraic[84];
		algebraic[4] = (VoI -  floor(VoI/constants[1])*constants[1]>=constants[0]&&VoI -  floor(VoI/constants[1])*constants[1]<=constants[0]+constants[2] ? - constants[3] : 0.00000);
		algebraic[92] =  constants[99]*states[24]*(( constants[97]*constants[137])/constants[134] - states[31]) -  constants[102]*states[31];
		algebraic[89] =  constants[77]*states[23]*(states[24] - states[5]);
		algebraic[90] =  constants[83]*(states[24] - states[5]);
		algebraic[91] = ( constants[132]*constants[84]*(pow(states[4]/constants[86], constants[88]) - pow(states[24]/constants[87], constants[88])))/(1.00000+pow(states[4]/constants[86], constants[88])+pow(states[24]/constants[87], constants[88]));
		algebraic[95] =  constants[98]*states[5]*(( constants[94]*0.100000*constants[137])/constants[136] - states[28]) -  constants[100]*states[28];
		algebraic[97] =  constants[98]*states[6]*(( constants[93]*constants[137])/constants[135] - states[27]) -  constants[100]*states[27];
		algebraic[98] =  constants[98]*states[5]*(( constants[96]*0.100000*constants[137])/constants[136] - states[30]) -  constants[101]*states[30];
		algebraic[96] =  constants[110]*states[4]*(constants[103] - states[32]) -  constants[117]*states[32];
		algebraic[100] =  constants[98]*states[6]*(( constants[95]*constants[137])/constants[135] - states[29]) -  constants[101]*states[29];
		algebraic[99] =  constants[111]*states[4]*(constants[104] - (states[33]+states[34])) -  constants[118]*states[33];
		algebraic[93] =  (states[5] - states[6])*8.24130e-13;
		algebraic[101] = algebraic[95]+algebraic[98];
		algebraic[103] = (algebraic[68] -  2.00000*algebraic[76])+algebraic[86]+algebraic[82];
		algebraic[102] =  constants[112]*constants[9]*(constants[105] - (states[33]+states[34])) -  constants[119]*states[34];
		algebraic[94] =  (states[6] - states[4])*3.72430e-12;
		algebraic[104] = algebraic[97]+algebraic[100];
		algebraic[106] = (algebraic[65] -  2.00000*algebraic[77])+algebraic[87]+algebraic[84];
		algebraic[105] =  constants[113]*states[4]*(constants[106] - states[35]) -  constants[120]*states[35];
		algebraic[107] =  constants[114]*states[4]*(constants[107] - (states[36]+states[37])) -  constants[121]*states[36];
		algebraic[108] =  constants[115]*constants[9]*(constants[108] - (states[36]+states[37])) -  constants[122]*states[37];
		algebraic[109] =  constants[116]*states[4]*(constants[109] - states[38]) -  constants[123]*states[38];
		algebraic[110] = algebraic[96]+algebraic[99]+algebraic[102]+algebraic[105]+algebraic[107]+algebraic[108]+algebraic[109];
	}

};
